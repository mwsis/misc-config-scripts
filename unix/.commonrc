# ######################################################################### #
# File:         unix/.commonrc
#
# Purpose:      A base .bashrc / .zshrc
#
# Created:      Many, many years ago
# Updated:      8th June 2021
#
# Author:       Matt Wilson
#
# Copyright (c) Matt Wilson, 2000-2021
# All rights reserved
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
#
# * Neither the names of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
# IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# ######################################################################### #


# ######################################
# aliases

# cb - copy to clipboard

if which pbcopy &>/dev/null; then

	alias cb=pbcopy
fi

# hist - show all history

if false; then

	:
elif [ -n "$BASH_VERSION" ]; then

	alias hist="history"
elif [ -n "$ZSH_VERSION" ]; then

	alias hist="history 0"
else

	echo "shell not recognised as either 'bash' or 'zsh'"
fi

# ldd - list dynamic dependencies

if which otool &>/dev/null; then

	alias ldd='otool -L'
fi

# ll - list files long-form

alias ll='ls -a -G -h -l'
if which gls &>/dev/null; then

	alias ll='gls --color=auto -a -F -G -h -l --group-directories-first'
fi

# vi - ensuring vi is vim, where vim present

if which vim &>/dev/null; then

	alias vi="vim"
fi

# ######################################
# environment variables

# GOPATH

if command -v do > /dev/null; then

	if [[ "" != "$GOPATH" ]]; then

		:
	elif [[ -f ~/.gopath ]]; then

		gopath=$(eval echo $(head -n 1 ~/.gopath))

		export GOPATH=$gopath
	elif [[ -d ~/dev/go ]]; then

		export GOPATH=~/dev/go
	elif [[ -d ~/go ]]; then

		export GOPATH=~/go
	else

		echo -e "WARNING: GOPATH not defined, and cannot be inferred: file ~/.gopath does not exist; directories ~/dev/go and ~/go do not exist"
	fi
fi

# PATH

POTENTIAL_LOCAL_PATHS_=()
POTENTIAL_LOCAL_PATHS_+=($HOME/.bin)
POTENTIAL_LOCAL_PATHS_+=($HOME/bin)
POTENTIAL_LOCAL_PATHS_+=(:/Applications/Xcode.app/Contents/Developer/usr/bin)

for p in ${POTENTIAL_LOCAL_PATHS_[@]}
do

	if [[ ":" == ${p:0:1} ]]
	then

		PATH=$PATH:${p:1}
	else

		PATH=$p:$PATH
	fi
	export PATH
done

# prompt

function fn_local_branch_name_4_git_prompt_() {

	git branch 2>&- | grep "^[*]" | cut -c 3-
}

if [ -n "$BASH_VERSION" ]; then

	export PS1='[\033[01;32m\u@\h\033[00m] [\033[01;34m\w\033[00m] [\033[01;35m`fn_local_branch_name_4_git_prompt_`\033[00m]\n$ '
fi

if [ -n "$ZSH_VERSION" ]; then

	NEWLINE_4_GIT_PROMPT_=$'\n'
	export PROMPT='[%F{green}%n@%m%f] [%F{blue}%~%f] [%F{cyan}$(fn_local_branch_name_4_git_prompt_)%f]${NEWLINE_4_GIT_PROMPT_}$ '
fi

# rbenv

if command -v rbenv &>/dev/null; then

	echo -e "\tInitialising rbenv ..."
	eval "$(rbenv init -)"
fi

# ######################################
# functions

if [ -d $HOME/.bin ]; then

	for f in ~/.bin/fn_*sh
	do

		source "$f"
	done
fi

# ######################################
# editor

set -o vi || export EDITOR=vi

if [ -n "$BASH_VERSION" ]; then

	export HISTCONTROL=erasedups:ignoreboth

	export HISTIGNORE=
	export HISTIGNORE+='cd:'
	export HISTIGNORE+='exit:'
	export HISTIGNORE+='gi tl10:'
	export HISTIGNORE+='gi tst:'
	export HISTIGNORE+='giot st:'
	export HISTIGNORE+='git diff:'
	export HISTIGNORE+='git dis:'
	export HISTIGNORE+='git diw:'
	export HISTIGNORE+='git piush:'
	export HISTIGNORE+='git push:'
	export HISTIGNORE+='git st:'
	export HISTIGNORE+='gitdis:'
	export HISTIGNORE+='gitdiw:'
	export HISTIGNORE+='gut st:'
	export HISTIGNORE+='history *:'
	export HISTIGNORE+='history:'
	export HISTIGNORE+='k:'
	export HISTIGNORE+='kgit st:'
	export HISTIGNORE+='ll:'
	export HISTIGNORE+='ls -al:'
	export HISTIGNORE+='ls:'
	export HISTIGNORE+='pwd:'
fi

if [ -n "$ZSH_VERSION" ]; then

	setopt LIST_ROWS_FIRST
	setopt NO_AUTO_MENU
	setopt NO_BEEP

	setopt HIST_FIND_NO_DUPS
	setopt HIST_IGNORE_ALL_DUPS
	setopt HIST_IGNORE_SPACE
	setopt HIST_REDUCE_BLANKS
	setopt HIST_SAVE_NO_DUPS
	setopt HIST_VERIFY
	setopt PROMPT_SUBST

	HISTORY_IGNORE="("
	HISTORY_IGNORE+="cd|"
	HISTORY_IGNORE+="exit|"
	HISTORY_IGNORE+="gi tl10|"
	HISTORY_IGNORE+="gi tst|"
	HISTORY_IGNORE+="giot st|"
	HISTORY_IGNORE+="git diff|"
	HISTORY_IGNORE+="git dis|"
	HISTORY_IGNORE+="git diw|"
	HISTORY_IGNORE+="git piush|"
	HISTORY_IGNORE+="git push|"
	HISTORY_IGNORE+="git st|"
	HISTORY_IGNORE+="gitdis|"
	HISTORY_IGNORE+="gitdiw|"
	HISTORY_IGNORE+="gut st|"
	HISTORY_IGNORE+="history *|"
	HISTORY_IGNORE+="history|"
	HISTORY_IGNORE+="kgit st|"
	HISTORY_IGNORE+="kgit st|"
	HISTORY_IGNORE+="k|"
	HISTORY_IGNORE+="ll|"
	HISTORY_IGNORE+="ls -al|"
	HISTORY_IGNORE+="ls|"
	HISTORY_IGNORE+="pwd|"
	HISTORY_IGNORE+=")"
fi

# ############################## end of file ############################## #

